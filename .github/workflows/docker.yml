name: Build and Push Docker image

on:
  push:
    branches:
      - main

jobs:
  build-push-release:
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install dependencies
        run: npm ci 

      - name: Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Semantic Version Tag
        id: tag_vars
        # semantic-release creates a tag. We find the latest one starting with 'v'.
        run: |
          RELEASE_TAG=$(git describe --tags --abbrev=0)
          # Only proceed with Docker steps if a release tag was created
          if [ -z "$RELEASE_TAG" ]; then
            echo "::notice::No new release tag created by semantic-release. Skipping Docker build."
            echo "NEXT_VERSION=no_release" >> $GITHUB_ENV
          else
            # Remove the 'v' prefix for the Docker tag
            NEXT_VERSION=${RELEASE_TAG:1} 
            echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
            echo "IS_RELEASE=true" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            jackson147/wadebridge-gaming-group:latest
            jackson147/wadebridge-gaming-group:${{ env.NEXT_VERSION }}
          build-args: |
            AUTH_SECRET=${{ secrets.AUTH_SECRET }}
            AUTH_DISCORD_ID=${{ secrets.AUTH_DISCORD_ID }}
            AUTH_DISCORD_SECRET=${{ secrets.AUTH_DISCORD_SECRET }}
            DATABASE_URL=${{ vars.DATABASE_URL }}
            AUTH_TRUST_HOST=${{ vars.AUTH_TRUST_HOST }}
          labels: |
            org.opencontainers.image.revision=${{ env.SHORT_SHA }}